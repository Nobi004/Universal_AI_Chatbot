# Generated by Django 5.2.3 on 2025-07-01 23:56

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LLMModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Model identifier (e.g., gpt-3.5-turbo)', max_length=100)),
                ('display_name', models.CharField(help_text='User-friendly name', max_length=100)),
                ('description', models.TextField(blank=True)),
                ('max_tokens', models.IntegerField(default=4096, validators=[django.core.validators.MinValueValidator(1)])),
                ('supports_streaming', models.BooleanField(default=True)),
                ('supports_functions', models.BooleanField(default=False)),
                ('cost_per_1k_input_tokens', models.DecimalField(blank=True, decimal_places=6, help_text='Cost per 1000 input tokens in USD', max_digits=10, null=True)),
                ('cost_per_1k_output_tokens', models.DecimalField(blank=True, decimal_places=6, help_text='Cost per 1000 output tokens in USD', max_digits=10, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'LLM Model',
                'verbose_name_plural': 'LLM Models',
                'ordering': ['provider', 'name'],
            },
        ),
        migrations.CreateModel(
            name='LLMProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('provider_type', models.CharField(choices=[('openai', 'OpenAI'), ('anthropic', 'Anthropic'), ('mistral', 'Mistral'), ('huggingface', 'HuggingFace'), ('cohere', 'Cohere'), ('custom', 'Custom')], max_length=20)),
                ('base_url', models.URLField(help_text='Base API URL for the provider')),
                ('api_key', models.CharField(help_text='API key for authentication', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'LLM Provider',
                'verbose_name_plural': 'LLM Providers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('system_prompt', models.TextField(blank=True)),
                ('temperature', models.FloatField(default=0.7, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('max_tokens', models.IntegerField(default=2000, validators=[django.core.validators.MinValueValidator(1)])),
                ('total_tokens_used', models.IntegerField(default=0)),
                ('total_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('is_archived', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL)),
                ('model', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chatbot.llmmodel')),
            ],
            options={
                'verbose_name': 'Chat Session',
                'verbose_name_plural': 'Chat Sessions',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='LLMConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(default=0.7, help_text='Controls randomness in responses (0-2)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('max_tokens', models.IntegerField(default=2000, help_text='Maximum tokens per response', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(32000)])),
                ('system_prompt', models.TextField(blank=True, help_text='Default system prompt for all conversations')),
                ('rate_limit_per_day', models.IntegerField(default=100, help_text='Maximum messages per day (0 for unlimited)', validators=[django.core.validators.MinValueValidator(0)])),
                ('enable_streaming', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='llm_config', to=settings.AUTH_USER_MODEL)),
                ('default_model', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='ai_chatbot.llmmodel')),
            ],
            options={
                'verbose_name': 'LLM Configuration',
                'verbose_name_plural': 'LLM Configurations',
            },
        ),
        migrations.AddField(
            model_name='llmmodel',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='ai_chatbot.llmprovider'),
        ),
        migrations.CreateModel(
            name='UsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('message_count', models.IntegerField(default=0)),
                ('total_tokens', models.IntegerField(default=0)),
                ('total_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Usage Log',
                'verbose_name_plural': 'Usage Logs',
            },
        ),
        migrations.CreateModel(
            name='UserAPIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ai_chatbot.llmprovider')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_keys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User API Key',
                'verbose_name_plural': 'User API Keys',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant'), ('system', 'System'), ('function', 'Function')], max_length=10)),
                ('content', models.TextField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('input_tokens', models.IntegerField(blank=True, null=True)),
                ('output_tokens', models.IntegerField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(blank=True, help_text='Response time in milliseconds', null=True)),
                ('is_error', models.BooleanField(default=False)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='ai_chatbot.chatsession')),
            ],
            options={
                'verbose_name': 'Chat Message',
                'verbose_name_plural': 'Chat Messages',
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['session', 'created_at'], name='ai_chatbot__session_405d00_idx'), models.Index(fields=['role'], name='ai_chatbot__role_554cd1_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['user', '-updated_at'], name='ai_chatbot__user_id_34c139_idx'),
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['is_archived'], name='ai_chatbot__is_arch_87cec4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='llmmodel',
            unique_together={('provider', 'name')},
        ),
        migrations.AddIndex(
            model_name='usagelog',
            index=models.Index(fields=['user', 'date'], name='ai_chatbot__user_id_a1bc24_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usagelog',
            unique_together={('user', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='userapikey',
            unique_together={('user', 'provider')},
        ),
    ]
